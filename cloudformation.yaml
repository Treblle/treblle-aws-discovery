AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS API Gateway Discovery Lambda Function with Cross-Account Role'

Parameters:
  LambdaExecutionRoleName:
    Type: String
    Default: 'TreblleDiscoveryLambdaRole'
    Description: 'Name for the Lambda execution role'
  
  ScheduleExpression:
    Type: String
    Default: 'rate(24 hours)'
    Description: 'Schedule for running the discovery (e.g., rate(24 hours), cron(0 9 * * ? *))'
  
  RegionList:
    Type: CommaDelimitedList
    Default: 'us-east-1,us-west-2,eu-west-1'
    Description: 'Comma-separated list of AWS regions to scan (e.g., us-east-1,us-west-2,eu-west-1)'
  
  TreblleSDKToken:
    Type: String
    NoEcho: true
    Description: 'Treblle SDK Token (will be sent as x-api-key header with each request)'
    MinLength: 1

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaExecutionRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TreblleDiscoveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'


  # Lambda Function
  APIGatewayDiscoveryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'treblle-api-gateway-discovery'
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 600  # 10 minutes
      MemorySize: 256
      Architectures:
        - arm64
      Environment:
        Variables:
          TREBLLE_SDK_TOKEN: !Ref TreblleSDKToken
          SCAN_REGIONS: !Join [',', !Ref RegionList]
      Code:
        ZipFile: |
          const{APIGatewayClient:A,GetRestApisCommand:B,GetStagesCommand:C}=require('@aws-sdk/client-api-gateway'),{ApiGatewayV2Client:D,GetApisCommand:E,GetStagesCommand:F}=require('@aws-sdk/client-apigatewayv2'),{STSClient:G,GetCallerIdentityCommand:H}=require('@aws-sdk/client-sts'),https=require('https');const httpsAgent=new https.Agent({keepAlive:!0,maxSockets:50,maxFreeSockets:10,timeout:6e4,freeSocketTimeout:3e4}),BATCH_SIZE=50,TREBLLE_SDK_TOKEN=process.env.TREBLLE_SDK_TOKEN,SCAN_REGIONS=process.env.SCAN_REGIONS,stsClient=new G({});exports.handler=async e=>{if(console.log('Starting API Gateway discovery...'),!TREBLLE_SDK_TOKEN)return console.error('TREBLLE_SDK_TOKEN environment variable is required'),{statusCode:500,body:JSON.stringify({error:'Configuration error',message:'TREBLLE_SDK_TOKEN environment variable is required'})};try{if(!SCAN_REGIONS)return console.error('SCAN_REGIONS environment variable is required'),{statusCode:500,body:JSON.stringify({error:'Configuration error',message:'SCAN_REGIONS environment variable is required'})};const t=SCAN_REGIONS.split(',').map(e=>e.trim()).filter(e=>e.length>0),n=validateRegions(t);if(0===n.length)return console.error('No valid regions found in SCAN_REGIONS'),{statusCode:500,body:JSON.stringify({error:'Configuration error',message:'No valid regions found in SCAN_REGIONS'})};const r=await getCurrentAccountId();console.log(`Will scan current account ${r} in ${n.length} regions: ${n.join(', ')}`);const o=n.map(e=>scanRegion(r,e,null)),s=await Promise.allSettled(o),i=[];let a=0,c=0,l=0;return s.forEach((e,t)=>{const o=n[t];'fulfilled'===e.status?(i.push(...e.value),a+=e.value.length,c++,console.log(`✓ Found ${e.value.length} APIs in ${r}/${o}`)):(l++,console.error(`✗ Error scanning ${r}/${o}:`,e.reason.message))}),console.log(`Scan complete: ${c} successful, ${l} failed regions`),console.log(`Total APIs discovered: ${a}`),i.length>0&&await sendApisInBatches(i),{statusCode:200,body:JSON.stringify({message:'API discovery completed successfully',totalApis:a,targetAccount:r,regionsScanned:c,regionsRequested:n.length,regionsFailed:l,regions:n})}}catch(e){return console.error('Error in API discovery:',e),{statusCode:500,body:JSON.stringify({error:'API discovery failed',message:e.message})}}};function validateRegions(e){const t=['us-east-1','us-east-2','us-west-1','us-west-2','eu-west-1','eu-west-2','eu-west-3','eu-central-1','eu-north-1','eu-south-1','ap-southeast-1','ap-southeast-2','ap-southeast-3','ap-northeast-1','ap-northeast-2','ap-northeast-3','ap-south-1','ap-east-1','ca-central-1','sa-east-1','af-south-1','me-south-1'],n=e.filter(e=>t.includes(e)),r=e.filter(e=>!t.includes(e));return r.length>0&&console.warn(`Invalid regions ignored: ${r.join(', ')}`),n}async function scanRegion(e,t,n){try{return console.log(`Scanning account ${e} in region ${t}...`),await discoverApisInAccount(e,t,n)}catch(n){throw console.error(`Error scanning ${e}/${t}:`,n.message),n}}async function getCurrentAccountId(){try{const e=new H,t=await stsClient.send(e);return t.Account}catch(e){throw console.error('Error getting current account ID:',e),e}}function createApiGatewayClients(e,t){const n={region:e};return t&&(n.credentials=t),{apiGatewayClient:new A(n),apiGatewayV2Client:new D(n)}}async function discoverApisInAccount(e,t,n){const r=[],{apiGatewayClient:o,apiGatewayV2Client:s}=createApiGatewayClients(t,n);try{const[n,i]=await Promise.all([discoverRestApis(o,e,t),discoverHttpApis(s,e,t)]);r.push(...n,...i)}catch(n){throw console.error(`Error discovering APIs in ${e}/${t}:`,n.message),n}return r}async function discoverRestApis(e,t,n){const r=[];let o=null;do{try{const s=new B({limit:500,position:o||void 0}),i=await e.send(s);for(const e of i.items||[]){const o=await getRestApiStages(e,e.id),s=`https://${e.id}.execute-api.${n}.amazonaws.com`;r.push({accountId:t,region:n,apiId:e.id,apiName:e.name,apiType:'REST',stages:o,endpoint:s})}o=i.position}catch(e){console.error('Error getting REST APIs:',e.message);break}}while(o);return r}async function discoverHttpApis(e,t,n){const r=[];let o=null;do{try{const s=new E({MaxResults:'500',NextToken:o||void 0}),i=await e.send(s);for(const e of i.Items||[]){const o=await getHttpApiStages(e,e.ApiId),s=`https://${e.ApiId}.execute-api.${n}.amazonaws.com`;r.push({accountId:t,region:n,apiId:e.ApiId,apiName:e.Name,apiType:'HTTP',stages:o,endpoint:s})}o=i.NextToken}catch(e){console.error('Error getting HTTP APIs:',e.message);break}}while(o);return r}async function getRestApiStages(e,t){try{const n=new C({restApiId:t}),r=await e.send(n);return(r.item||[]).map(e=>e.stageName)}catch(e){return console.error(`Error getting stages for REST API ${t}:`,e.message),[]}}async function getHttpApiStages(e,t){try{const n=new F({ApiId:t}),r=await e.send(n);return(r.Items||[]).map(e=>e.StageName)}catch(e){return console.error(`Error getting stages for HTTP API ${t}:`,e.message),[]}}async function sendApisInBatches(e){const t=[];for(let n=0;n<e.length;n+=BATCH_SIZE)t.push(e.slice(n,n+BATCH_SIZE));console.log(`Sending ${e.length} APIs in ${t.length} batches`);for(let e=0;e<t.length;e++){const n=t[e];console.log(`Sending batch ${e+1}/${t.length} with ${n.length} APIs`);try{await sendApisBatch(n),console.log(`Successfully sent batch ${e+1}`)}catch(t){console.error(`Error sending batch ${e+1}:`,t.message)}e<t.length-1&&await new Promise(e=>setTimeout(e,100))}}async function sendApisBatch(e){return new Promise((t,n)=>{const r=JSON.stringify(e),o={hostname:'autodiscovery.treblle.com',port:443,path:'/api/v1/aws',method:'POST',agent:httpsAgent,headers:{'Content-Type':'application/json','Content-Length':Buffer.byteLength(r),'x-api-key':TREBLLE_SDK_TOKEN,'User-Agent':'Treblle-AWS-Discovery/1.0'}},s=https.request(o,e=>{let r='';e.on('data',e=>{r+=e}),e.on('end',()=>{e.statusCode>=200&&e.statusCode<300?t(r):n(new Error(`HTTP ${e.statusCode}: ${r}`))})});s.on('error',e=>{n(e)}),s.write(r),s.end()})}

  # EventBridge Rule for Scheduling
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: 'treblle-api-gateway-discovery-schedule'
      Description: 'Schedule for Treblle API Gateway discovery Lambda'
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt APIGatewayDiscoveryFunction.Arn
          Id: 'APIGatewayDiscoveryTarget'

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref APIGatewayDiscoveryFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleRule.Arn

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${APIGatewayDiscoveryFunction}'
      RetentionInDays: 30

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt APIGatewayDiscoveryFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'
  
  ScanRegions:
    Description: 'Regions being scanned'
    Value: !Join [',', !Ref RegionList]
    Export:
      Name: !Sub '${AWS::StackName}-ScanRegions'
  
  DeploymentInstructions:
    Description: 'Instructions for updating Lambda code'
    Value: !Sub 
      - |
        TREBLLE API DISCOVERY DEPLOYMENT
        
        === STACK DEPLOYED SUCCESSFULLY ===
        Lambda Function: treblle-api-gateway-discovery
        Target Account: Current account (auto-detected)
        Scan Regions: ${RegionListJoined}
        Treblle SDK Token: [CONFIGURED SECURELY]
        
        === LAMBDA CODE ===
        The Lambda function is deployed with the latest optimized code included.
        No additional code updates are required - the function is ready to use!
        
        === CONFIGURATION ===
        Account: Current account (auto-detected)
        Regions: ${RegionListJoined}
        Batch Size: 50 APIs per request
        Schedule: ${ScheduleExpression}
        
        === NEXT STEPS ===
        1. Test the function: aws lambda invoke --function-name treblle-api-gateway-discovery response.json
        2. The function will run automatically based on your schedule
        
        === FOR MULTIPLE ACCOUNTS ===
        Deploy this stack in each target account you want to monitor:
        aws cloudformation deploy --template-file template.yaml --stack-name treblle-discovery --parameter-overrides TreblleSDKToken=TOKEN RegionList=us-east-1,us-west-2 --capabilities CAPABILITY_NAMED_IAM
      - RegionListJoined: !Join [',', !Ref RegionList]